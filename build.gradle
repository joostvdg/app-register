buildscript {
	ext {
		kotlinVersion = '1.2.31'
		springBootVersion = '2.0.0.RELEASE'
	}
	repositories {
        jcenter()
        mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}
plugins {
    id "org.sonarqube" version "2.6.2"
    id "com.jfrog.artifactory" version "4.6.2"
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'announce'
apply plugin: 'org.sonarqube'
apply plugin: 'maven'
apply plugin: 'maven-publish'

group = 'com.github.joostvdg'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
    jcenter()
    mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}
sourceSets {
    // So that we can place source code in 'src/integrationTest/java':
    integrationTest {
        kotlin {

            // So that we can compile against the business classes (GreeterService, ...):
            compileClasspath += main.output
            // So that we can compile against the libs used by the business classes:
            compileClasspath += main.compileClasspath

            // So that we can compile against the unit test classes (custom utilities fx):
            compileClasspath += test.output
            // So that we can compile against the libs used by the unit test classes (JUnit, Spring test support, ...):
            compileClasspath += test.compileClasspath

            // So that test- and business classes can be used at runtime:
            runtimeClasspath += test.runtimeClasspath

        }
    }
}

task integrationTest(type: Test) {
    // So that Gradle knows where the integration test classes are:
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    // So that Gradle knows which runtime class path to use:
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task showMeCache << {
    configurations.compile.each { println it }
}

ext {
    springCloudVersion = 'Finchley.M9'
}
dependencies {
	compile('org.springframework.boot:spring-boot-starter-actuator')

    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
    compile group: 'org.springframework.data', name: 'spring-data-elasticsearch', version: '3.0.5.RELEASE'
    compile('org.springframework.boot:spring-boot-starter-data-elasticsearch')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.springframework.cloud:spring-cloud-starter-consul-discovery')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile('org.springframework.boot:spring-boot-starter-web')
    compile('com.fasterxml.jackson.core:jackson-annotations:2.9.4')
    compile('com.fasterxml.jackson.module:jackson-module-kotlin')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	compile("org.jetbrains.kotlin:kotlin-reflect")
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.8.0'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.8.0'

    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile 'io.rest-assured:rest-assured:3.0.7'
    testCompile 'io.rest-assured:json-path:3.0.7'
    testCompile 'io.kotlintest:kotlintest:2.0.7'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


allprojects {
    apply plugin: "com.jfrog.artifactory"
}

// Generated by Artifactory, but not working
//artifactory {
//    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
//    publish {
//        repository {
//            repoKey = 'gradle-release-local'
//            username = "${artifactory_user}"
//            password = "${artifactory_password}"
//            maven = true
//
//        }
//    }
//    resolve {
//        repository {
//            repoKey = 'gradle-dev'
//            username = "${artifactory_user}"
//            password = "${artifactory_password}"
//            maven = true
//
//        }
//    }
//}
//artifactoryPublish {
//    dependsOn bootJar
//}

//https://dzone.com/articles/publish-jar-artifact-using
//http://igorpopov.io/2014/04/27/artifactory-gradle-and-publishing/
publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.github.joostvdg'
            artifactId 'app-register'
            version '0.0.1-SNAPSHOT'
            from components.java

            repositories {
                maven {
                    credentials {
                        username = "${artifactory_user}"
                        password = "${artifactory_password}"
                    }
                    url "${artifactory_contextUrl}/gradle-release-local"
                }
            }
        }
    }
}
